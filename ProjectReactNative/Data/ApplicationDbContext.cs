// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ProjectReactNative.Data;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Animal> Animals { get; set; }

    public virtual DbSet<Event> Events { get; set; }

    public virtual DbSet<EventStaff> EventStaffs { get; set; }

    public virtual DbSet<Facility> Facilities { get; set; }

    public virtual DbSet<Habitat> Habitats { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<QrScanLog> QrScanLogs { get; set; }

    public virtual DbSet<RefreshToken> RefreshTokens { get; set; }

    public virtual DbSet<Staff> Staffs { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserTicket> UserTickets { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Animal>(entity =>
        {
            entity.HasKey(e => e.AnimalId).HasName("PK__Animals__DE680F92C5D76682");

            entity.Property(e => e.AnimalId)
                .HasMaxLength(10)
                .HasColumnName("animal_id");
            entity.Property(e => e.ArrivalDate)
                .HasColumnType("datetime")
                .HasColumnName("arrival_date");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.DateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("date_of_birth");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.HabitatId)
                .HasMaxLength(10)
                .HasColumnName("habitat_id");
            entity.Property(e => e.LocationCoordinates)
                .HasMaxLength(100)
                .HasColumnName("location_coordinates");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ScientificName)
                .HasMaxLength(100)
                .HasColumnName("scientific_name");
            entity.Property(e => e.Species)
                .HasMaxLength(100)
                .HasColumnName("species");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Habitat).WithMany(p => p.Animals)
                .HasForeignKey(d => d.HabitatId)
                .HasConstraintName("FK__Animals__habitat__6EF57B66");
        });

        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__Events__2370F727EB0E454C");

            entity.Property(e => e.EventId)
                .HasMaxLength(10)
                .HasColumnName("event_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EndTime)
                .HasColumnType("time")
                .HasColumnName("end_time");
            entity.Property(e => e.EventDate)
                .HasColumnType("datetime")
                .HasColumnName("event_date");
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .HasColumnName("location");
            entity.Property(e => e.LocationCoordinates)
                .HasMaxLength(100)
                .HasColumnName("location_coordinates");
            entity.Property(e => e.StartTime)
                .HasColumnType("time")
                .HasColumnName("start_time");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<EventStaff>(entity =>
        {
            entity.HasKey(e => e.EventStaffId).HasName("PK__EventSta__3E47C255B5E6D4C2");

            entity.Property(e => e.EventStaffId)
                .HasMaxLength(10)
                .HasColumnName("event_staff_id");
            entity.Property(e => e.EventId)
                .HasMaxLength(10)
                .HasColumnName("event_id");
            entity.Property(e => e.RoleInEvent)
                .HasMaxLength(100)
                .HasColumnName("role_in_event");
            entity.Property(e => e.StaffId)
                .HasMaxLength(10)
                .HasColumnName("staff_id");

            entity.HasOne(d => d.Event).WithMany(p => p.EventStaffs)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("FK__EventStaf__event__797309D9");

            entity.HasOne(d => d.Staff).WithMany(p => p.EventStaffs)
                .HasForeignKey(d => d.StaffId)
                .HasConstraintName("FK__EventStaf__staff__787EE5A0");
        });

        modelBuilder.Entity<Facility>(entity =>
        {
            entity.HasKey(e => e.FacilityId).HasName("PK__Faciliti__B2E8EAAE2B6B4015");

            entity.Property(e => e.FacilityId)
                .HasMaxLength(10)
                .HasColumnName("facility_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.LocationCoordinates)
                .HasMaxLength(100)
                .HasColumnName("location_coordinates");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.OpeningHours)
                .HasColumnType("datetime")
                .HasColumnName("opening_hours");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<Habitat>(entity =>
        {
            entity.HasKey(e => e.HabitatId).HasName("PK__Habitats__3B715112D01A7D93");

            entity.Property(e => e.HabitatId)
                .HasMaxLength(10)
                .HasColumnName("habitat_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__Images__DC9AC9556D4A6F01");

            entity.Property(e => e.ImageId)
                .HasMaxLength(10)
                .HasColumnName("image_id");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.RefId)
                .HasMaxLength(10)
                .HasColumnName("ref_id");
            entity.Property(e => e.UploadedDate)
                .HasColumnType("datetime")
                .HasColumnName("uploaded_date");
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.HasKey(e => e.NewsId).HasName("PK__News__4C27CCD8FCA100F4");

            entity.Property(e => e.NewsId)
                .HasMaxLength(10)
                .HasColumnName("news_id");
            entity.Property(e => e.Contents).HasColumnName("contents");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.PublishedDate)
                .HasColumnType("datetime")
                .HasColumnName("published_date");
            entity.Property(e => e.Title)
                .HasMaxLength(100)
                .HasColumnName("title");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__46596229C4B30A05");

            entity.Property(e => e.OrderId)
                .HasMaxLength(10)
                .HasColumnName("order_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.OrderDatetime)
                .HasColumnType("datetime")
                .HasColumnName("order_datetime");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(1)
                .HasColumnName("payment_status");
            entity.Property(e => e.TotalAmount).HasColumnName("total_amount");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total_price");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Orders__user_id__6383C8BA");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasKey(e => e.OrderItemId).HasName("PK__Order_It__3764B6BC10BA2CFE");

            entity.ToTable("Order_Items");

            entity.Property(e => e.OrderItemId)
                .HasMaxLength(10)
                .HasColumnName("order_item_id");
            entity.Property(e => e.OrderId)
                .HasMaxLength(10)
                .HasColumnName("order_id");
            entity.Property(e => e.PriceEach)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price_each");
            entity.Property(e => e.ProductId)
                .HasMaxLength(10)
                .HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__Order_Ite__order__66603565");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__Order_Ite__produ__6754599E");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Products__47027DF54B09C236");

            entity.Property(e => e.ProductId)
                .HasMaxLength(10)
                .HasColumnName("product_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");
            entity.Property(e => e.QrCodeUrl)
                .HasMaxLength(255)
                .HasColumnName("qr_code_url");
            entity.Property(e => e.StockQuantity).HasColumnName("stock_quantity");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<QrScanLog>(entity =>
        {
            entity.HasKey(e => e.ScanId).HasName("PK__QR_Scan___9846B9BB7F463C10");

            entity.ToTable("QR_Scan_Logs");

            entity.Property(e => e.ScanId)
                .HasMaxLength(10)
                .HasColumnName("scan_id");
            entity.Property(e => e.ProductId)
                .HasMaxLength(10)
                .HasColumnName("product_id");
            entity.Property(e => e.QrCodeUrl)
                .HasMaxLength(255)
                .HasColumnName("qr_code_url");
            entity.Property(e => e.ScannedAt)
                .HasColumnType("datetime")
                .HasColumnName("scanned_at");

            entity.HasOne(d => d.Product).WithMany(p => p.QrScanLogs)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__QR_Scan_L__produ__6A30C649");
        });

        modelBuilder.Entity<RefreshToken>(entity =>
        {
            entity.ToTable("refresh_tokens");

            entity.Property(e => e.RefreshTokenId).HasColumnName("refresh_token_id");
            entity.Property(e => e.ExpiresAt).HasColumnName("expires_at");
            entity.Property(e => e.IsValid).HasColumnName("is_valid");
            entity.Property(e => e.JwtTokenId)
                .HasMaxLength(50)
                .HasColumnName("jwt_token_id");
            entity.Property(e => e.Token)
                .HasMaxLength(100)
                .HasColumnName("token");
            entity.Property(e => e.UserId)
                .HasMaxLength(36)
                .HasColumnName("user_id");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__Staff__1963DD9CEED18550");

            entity.Property(e => e.StaffId)
                .HasMaxLength(10)
                .HasColumnName("staff_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("first_name");
            entity.Property(e => e.HireDate)
                .HasColumnType("datetime")
                .HasColumnName("hire_date");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("last_name");
            entity.Property(e => e.Position)
                .HasMaxLength(100)
                .HasColumnName("position");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Staff)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Staff__user_id__5BE2A6F2");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.TicketId).HasName("PK__Tickets__D596F96B18CDAE9B");

            entity.Property(e => e.TicketId)
                .HasMaxLength(10)
                .HasColumnName("ticket_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");
            entity.Property(e => e.PurchaseDate)
                .HasColumnType("datetime")
                .HasColumnName("purchase_date");
            entity.Property(e => e.TicketType)
                .HasMaxLength(100)
                .HasColumnName("ticket_type");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
            entity.Property(e => e.VisitDate)
                .HasColumnType("datetime")
                .HasColumnName("visit_date");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__B9BE370F01B068F3");

            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("user_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(10)
                .HasColumnName("phone");
            entity.Property(e => e.Role)
                .HasMaxLength(100)
                .HasColumnName("role");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<UserTicket>(entity =>
        {
            entity.HasKey(e => e.UserTicketId).HasName("PK__User_Tic__6E36A6B60B25ECAC");

            entity.ToTable("User_Ticket");

            entity.Property(e => e.UserTicketId)
                .HasMaxLength(10)
                .HasColumnName("user_ticket_id");
            entity.Property(e => e.AssignedAt)
                .HasColumnType("datetime")
                .HasColumnName("assigned_at");
            entity.Property(e => e.TicketId)
                .HasMaxLength(10)
                .HasColumnName("ticket_id");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .HasColumnName("user_id");

            entity.HasOne(d => d.Ticket).WithMany(p => p.UserTickets)
                .HasForeignKey(d => d.TicketId)
                .HasConstraintName("FK__User_Tick__ticke__59063A47");

            entity.HasOne(d => d.User).WithMany(p => p.UserTickets)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__User_Tick__user___5812160E");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}