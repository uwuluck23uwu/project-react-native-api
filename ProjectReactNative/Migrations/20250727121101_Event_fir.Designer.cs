// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectReactNative.Data;

#nullable disable

namespace ProjectReactNative.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250727121101_Event_fir")]
    partial class Event_fir
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassLibrary.Models.Data.Animal", b =>
                {
                    b.Property<string>("AnimalId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("animal_id");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("arrival_date");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("HabitatId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("habitat_id");

                    b.Property<string>("LocationCoordinates")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location_coordinates");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ScientificName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("scientific_name");

                    b.Property<string>("Species")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("species");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("AnimalId")
                        .HasName("PK__Animals__DE680F92C5D76682");

                    b.HasIndex("HabitatId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Event", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("event_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime")
                        .HasColumnName("event_date");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("LocationCoordinates")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location_coordinates");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("EventId")
                        .HasName("PK__Events__2370F727EB0E454C");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.EventStaff", b =>
                {
                    b.Property<string>("EventStaffId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("event_staff_id");

                    b.Property<string>("EventId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("event_id");

                    b.Property<string>("RoleInEvent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("role_in_event");

                    b.Property<string>("StaffId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("staff_id");

                    b.HasKey("EventStaffId")
                        .HasName("PK__EventSta__3E47C255B5E6D4C2");

                    b.HasIndex("EventId");

                    b.HasIndex("StaffId");

                    b.ToTable("EventStaffs");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Facility", b =>
                {
                    b.Property<string>("FacilityId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("facility_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("LocationCoordinates")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location_coordinates");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("OpeningHours")
                        .HasColumnType("datetime")
                        .HasColumnName("opening_hours");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("FacilityId")
                        .HasName("PK__Faciliti__B2E8EAAE2B6B4015");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Habitat", b =>
                {
                    b.Property<string>("HabitatId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("habitat_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("HabitatId")
                        .HasName("PK__Habitats__3B715112D01A7D93");

                    b.ToTable("Habitats");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Image", b =>
                {
                    b.Property<string>("ImageId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("image_id");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("RefId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ref_id");

                    b.Property<DateTime?>("UploadedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("uploaded_date");

                    b.HasKey("ImageId")
                        .HasName("PK__Images__DC9AC9556D4A6F01");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.News", b =>
                {
                    b.Property<string>("NewsId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("news_id");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("contents");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("published_date");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("NewsId")
                        .HasName("PK__News__4C27CCD8FCA100F4");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("OrderDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("order_datetime");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("payment_status");

                    b.Property<int?>("TotalAmount")
                        .HasColumnType("int")
                        .HasColumnName("total_amount");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("user_id");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__46596229C4B30A05");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.OrderItem", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("order_item_id");

                    b.Property<string>("OrderId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("PriceEach")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price_each");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderItemId")
                        .HasName("PK__Order_It__3764B6BC10BA2CFE");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Items", (string)null);
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("QrCodeUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("qr_code_url");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stock_quantity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__47027DF54B09C236");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.QrScanLog", b =>
                {
                    b.Property<string>("ScanId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("scan_id");

                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("product_id");

                    b.Property<string>("QrCodeUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("qr_code_url");

                    b.Property<DateTime?>("ScannedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("scanned_at");

                    b.HasKey("ScanId")
                        .HasName("PK__QR_Scan___9846B9BB7F463C10");

                    b.HasIndex("ProductId");

                    b.ToTable("QR_Scan_Logs", (string)null);
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("refresh_token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit")
                        .HasColumnName("is_valid");

                    b.Property<string>("JwtTokenId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("jwt_token_id");

                    b.Property<string>("Token")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("token");

                    b.Property<string>("UserId")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("user_id");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("staff_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("position");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("user_id");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__1963DD9CEED18550");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("purchase_date");

                    b.Property<string>("TicketType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ticket_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime")
                        .HasColumnName("visit_date");

                    b.HasKey("TicketId")
                        .HasName("PK__Tickets__D596F96B18CDAE9B");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F01B068F3");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.UserTicket", b =>
                {
                    b.Property<string>("UserTicketId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("user_ticket_id");

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("assigned_at");

                    b.Property<string>("TicketId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ticket_id");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("user_id");

                    b.HasKey("UserTicketId")
                        .HasName("PK__User_Tic__6E36A6B60B25ECAC");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Ticket", (string)null);
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Animal", b =>
                {
                    b.HasOne("ClassLibrary.Models.Data.Habitat", "Habitat")
                        .WithMany("Animals")
                        .HasForeignKey("HabitatId")
                        .HasConstraintName("FK__Animals__habitat__6EF57B66");

                    b.Navigation("Habitat");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.EventStaff", b =>
                {
                    b.HasOne("ClassLibrary.Models.Data.Event", "Event")
                        .WithMany("EventStaffs")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__EventStaf__event__797309D9");

                    b.HasOne("ClassLibrary.Models.Data.Staff", "Staff")
                        .WithMany("EventStaffs")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK__EventStaf__staff__787EE5A0");

                    b.Navigation("Event");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Order", b =>
                {
                    b.HasOne("ClassLibrary.Models.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Orders__user_id__6383C8BA");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.OrderItem", b =>
                {
                    b.HasOne("ClassLibrary.Models.Data.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Order_Ite__order__66603565");

                    b.HasOne("ClassLibrary.Models.Data.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Order_Ite__produ__6754599E");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.QrScanLog", b =>
                {
                    b.HasOne("ClassLibrary.Models.Data.Product", "Product")
                        .WithMany("QrScanLogs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__QR_Scan_L__produ__6A30C649");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Staff", b =>
                {
                    b.HasOne("ClassLibrary.Models.Data.User", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Staff__user_id__5BE2A6F2");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.UserTicket", b =>
                {
                    b.HasOne("ClassLibrary.Models.Data.Ticket", "Ticket")
                        .WithMany("UserTickets")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__User_Tick__ticke__59063A47");

                    b.HasOne("ClassLibrary.Models.Data.User", "User")
                        .WithMany("UserTickets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__User_Tick__user___5812160E");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Event", b =>
                {
                    b.Navigation("EventStaffs");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Habitat", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("QrScanLogs");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Staff", b =>
                {
                    b.Navigation("EventStaffs");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.Ticket", b =>
                {
                    b.Navigation("UserTickets");
                });

            modelBuilder.Entity("ClassLibrary.Models.Data.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Staff");

                    b.Navigation("UserTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
